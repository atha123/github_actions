{"name": "test_variable_product_clear_selection_btn_when_only_color_is_selected", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=134.0.6998.89); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7848DFE65+26629]\n\t(No symbol) [0x00007FF784846030]\n\t(No symbol) [0x00007FF7846D931A]\n\t(No symbol) [0x00007FF7846E0C7C]\n\t(No symbol) [0x00007FF7846E3A3C]\n\t(No symbol) [0x00007FF7846E3B0F]\n\t(No symbol) [0x00007FF784729B91]\n\t(No symbol) [0x00007FF784757AAA]\n\t(No symbol) [0x00007FF784722156]\n\t(No symbol) [0x00007FF784757CC0]\n\t(No symbol) [0x00007FF784780169]\n\t(No symbol) [0x00007FF784757883]\n\t(No symbol) [0x00007FF784720550]\n\t(No symbol) [0x00007FF784721803]\n\tGetHandleVerifier [0x00007FF784C372DD+3529853]\n\tGetHandleVerifier [0x00007FF784C4DA42+3621858]\n\tGetHandleVerifier [0x00007FF784C424F3+3575443]\n\tGetHandleVerifier [0x00007FF7849AB79A+860474]\n\t(No symbol) [0x00007FF7848508AF]\n\t(No symbol) [0x00007FF78484CBE4]\n\t(No symbol) [0x00007FF78484CD86]\n\t(No symbol) [0x00007FF78483C2E9]\n\tBaseThreadInitThunk [0x00007FF8CECE7374+20]\n\tRtlUserThreadStart [0x00007FF8D021CC91+33]", "trace": "self = <ssqatest.tests.frontend.product_detail_page.test_variable_product_options.TestVariableProductOptionValues object at 0x00000225D48FCCE0>, go_to_pdp_setup = None\n\n    @pytest.mark.tcid100\n    @pytest.mark.ecomfe144\n    def test_variable_product_clear_selection_btn_when_only_color_is_selected(self, go_to_pdp_setup):\n        \"\"\"\n        Test to verify the behavior of the clear selection button when only a color option is selected.\n         Args:\n            go_to_pdp_setup: A setup object.\n        \"\"\"\n    \n        color_to_select = 'Green'\n>       self.product_page.select_color_option_by_visible_text(color_to_select)\n\nssqatest\\tests\\frontend\\product_detail_page\\test_variable_product_options.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nssqatest\\src\\pages\\ProductPage.py:125: in select_color_option_by_visible_text\n    select.select_by_visible_text(color)\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\support\\select.py:117: in select_by_visible_text\n    self._set_selected(opt)\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\support\\select.py:212: in _set_selected\n    if not option.is_enabled():\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:192: in is_enabled\n    return self._execute(Command.IS_ELEMENT_ENABLED)[\"value\"]\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000225D4D2AE10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF78483C2E9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8CECE7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8D021CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=134.0.6998.89); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7848DFE65+26629]\nE       \t(No symbol) [0x00007FF784846030]\nE       \t(No symbol) [0x00007FF7846D931A]\nE       \t(No symbol) [0x00007FF7846E0C7C]\nE       \t(No symbol) [0x00007FF7846E3A3C]\nE       \t(No symbol) [0x00007FF7846E3B0F]\nE       \t(No symbol) [0x00007FF784729B91]\nE       \t(No symbol) [0x00007FF784757AAA]\nE       \t(No symbol) [0x00007FF784722156]\nE       \t(No symbol) [0x00007FF784757CC0]\nE       \t(No symbol) [0x00007FF784780169]\nE       \t(No symbol) [0x00007FF784757883]\nE       \t(No symbol) [0x00007FF784720550]\nE       \t(No symbol) [0x00007FF784721803]\nE       \tGetHandleVerifier [0x00007FF784C372DD+3529853]\nE       \tGetHandleVerifier [0x00007FF784C4DA42+3621858]\nE       \tGetHandleVerifier [0x00007FF784C424F3+3575443]\nE       \tGetHandleVerifier [0x00007FF7849AB79A+860474]\nE       \t(No symbol) [0x00007FF7848508AF]\nE       \t(No symbol) [0x00007FF78484CBE4]\nE       \t(No symbol) [0x00007FF78484CD86]\nE       \t(No symbol) [0x00007FF78483C2E9]\nE       \tBaseThreadInitThunk [0x00007FF8CECE7374+20]\nE       \tRtlUserThreadStart [0x00007FF8D021CC91+33]\n\nlhp321\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "\n        Test to verify the behavior of the clear selection button when only a color option is selected.\n         Args:\n            go_to_pdp_setup: A setup object.\n        ", "start": 1742570111117, "stop": 1742570111227, "uuid": "540bb5d8-3010-437f-ba31-646614ab7d11", "historyId": "f1a0efafa8969b7308defeaf91adf238", "testCaseId": "f3abe61de6ca46b6e6a9667604939b7d", "fullName": "ssqatest.tests.frontend.product_detail_page.test_variable_product_options.TestVariableProductOptionValues#test_variable_product_clear_selection_btn_when_only_color_is_selected", "labels": [{"name": "tag", "value": "ecomfe144"}, {"name": "tag", "value": "tcid100"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "tag", "value": "fe"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "smoke"}, {"name": "tag", "value": "pdp"}, {"name": "tag", "value": "pdp_variable"}, {"name": "parentSuite", "value": "ssqatest.tests.frontend.product_detail_page"}, {"name": "suite", "value": "test_variable_product_options"}, {"name": "subSuite", "value": "TestVariableProductOptionValues"}, {"name": "host", "value": "latha"}, {"name": "thread", "value": "15964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ssqatest.tests.frontend.product_detail_page.test_variable_product_options"}]}